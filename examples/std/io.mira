
#ifndef __io_mira__
#define __io_mira__

#include "./posix.mira"
#include "./string.mira"

sec .bss mem __io_fd 8

; ---
; :brief: print a char into the provided file.
; 
; :needs:
  sec .bss mem __fputc_buffer 1
; ---
sec .text func fputc req u08 i64 {
	__io_fd st64 __fputc_buffer st08
	1 __fputc_buffer __io_fd ld08 call write drop
}

; ---
; :brief: print an unsigned integer into the provided file.
; 
; :needs:
  sec .bss mem __fputu_buffer 32
; ---
sec .text func fputu req u64 i64 {
	__io_fd st64

	if [ dup 0 == ] {
		48 __io_fd ld64 call fputc
	}
	else {
		__fputu_buffer 32 +
		loop [ over 0 != ] { -- dup rot 10 /% rot swap 48 + swap st08 swap }
		dup __fputu_buffer 32 + swap - swap __io_fd ld64 call write drop
	}

	drop
}

; ---
; :brief: print a signed integer into the provided file.
; ---
sec .text func fputi req u64 i64 {
	if [ over 0 < ] { dup 45 swap call fputc swap ~ 1 + swap }
	call fputu
}

; ---
; :brief: print a string of provided length into the provided file.
; ---
sec .text func fputs req u64 ptr i64 {
	call write drop
}

#define stdin  0
#define stdout 1
#define stderr 2

; ---
; :brief: print a char into the stdout.
; ---
sec .text func putc req u08 { stdout call fputc }

; ---
; :brief: print an unsigned integer into the stdout.
; ---
sec .text func putu req u64 { stdout call fputu }

; ---
; :brief: print a signed integer into the stdout.
; ---
sec .text func puti req u64 { stdout call fputi }

; ---
; :brief: print a string of provided length into the stdout.
; ---
sec .text func puts req u64 ptr { stdout call fputs }

; ---
; :brief: print a char into the stderr.
; ---
sec .text func eputc req u08 { stderr call fputc }

; ---
; :brief: print an unsigned integer into the stderr.
; ---
sec .text func eputu req u64 { stderr call fputu }

; ---
; :brief: print a signed integer into the stderr.
; ---
sec .text func eputi req u64 { stderr call fputi }

; ---
; :brief: print a string of provided length into the stderr.
; ---
sec .text func eputs req u64 ptr { stderr call fputs }

; ---
; :brief: print cstring into the stdout.
; ---
sec .text func put-cstr req ptr ret i32 {
	dup call cstrlen swap call puts
}

; ---
; :brief: print cstring into the stderr.
; ---
sec .text func eput-cstr req ptr ret i32 {
	dup call cstrlen swap stderr call fputs
}

#endif
